# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD
run-name: Running
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: jujuassembly
  AWS_CODE_DEPLOY_APPLICATION:  jujuAssembly-CD
  AWS_CODE_DEPLOY_GROUP:  jujuAssembly-CD-group

permissions:
  contents: read

jobs:
  build-with-gradle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
       # 환경별 yml 파일 생성 - application-properties.yml
      
      - name: make application.properties
        if: |
          contains(github.ref, 'dev') || contains(github.ref, 'main')
        run: |
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application.properties # application.properties 생성
          echo "${{ secrets.APP_PROPERTIES }}" > ./application.properties
        shell: bash

      - name: make application-dev.properties
        if: |
          contains(github.ref, 'dev') || contains(github.ref, 'main')
        run: |
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application-dev.properties # application-dev.properties 생성
          echo "${{ secrets.APP_DEV_PROPERTIES }}" > ./application-dev.properties
        shell: bash
        
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build Project
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      - name: Upload to S3
        run: aws deploy push --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --ignore-hidden-files --s3-location s3://${{ env.AWS_S3_BUCKET }}/mj-ec2/$GITHUB_SHA.zip --source .

      - name: Deploy to EC2
        run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=${{ env.AWS_S3_BUCKET }},key=mj-ec2/$GITHUB_SHA.zip,bundleType=zip
